# Clean various temporary files.
cleansys() {
    local t=$(date +%s)

    echo " \e[30;1m[\e[35;1m•\e[30;1m]\e[32m trash\e[0m"
    cleansys_rmdir ~/.Trash/ ~/iCloud\ Drive/.Trash/ ~/.local/share/Trash
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m brew\e[0m"
    cleansys_brew
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m apt\e[0m"
    cleansys_apt
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m mise\e[0m"
    cleansys_mise
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m vim\e[0m"
    cleansys_vim
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m cargo\e[0m"
    cleansys_cargo
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m docker\e[0m"
    cleansys_docker
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m xcode\e[0m"
    cleansys_xcode
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m gradle\e[0m"
    cleansys_gradle

    #echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m local tm snapshots\e[0m"
    #tmutil deletelocalsnapshots /

    #~/Library/Developer/Xcode/Archives
    #~/Library/Developer/Xcode/iOS DeviceSupport
    #~/Library/Developer/CoreSimulator
    #~/Library/Caches/com.apple.dt.Xcode
    #~/Library/Application Support/MobileSync/Backup
    #~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads

    local took=$(($(date +%s) - $t))
    if [[ $took -gt 59 ]]; then
        local mins=$(($took / 60))
        local secs=$(($took % 60))
        printf "Done, cleaned in %dm%02ds.\n" $mins $secs
    else
        echo "Done, cleaned in ${took}s."
    fi
}

cleansys_brew() {
    [[ $(command -v brew) ]] || return 1

    brew cleanup -s
    brew autoremove -v
    cleansys_rmdir ~/Library/Caches/Homebrew
}

cleansys_apt() {
    [[ $(command -v apt-get) ]] || return 1

    sudo apt-get autoremove -y
    sudo apt-get clean
}

cleansys_mise() {
    [[ $(command -v mise) ]] || return 1

    mise prune -y
    mise cache clear
}

cleansys_vim() {
    test -d ~/.vim/swap && find $_ -type f -mtime +${VIM_CLEANUP_MAX_AGE_DAYS:-14} -print -delete
    test -d ~/.vim/undo && find $_ -type f -mtime +${VIM_CLEANUP_MAX_AGE_DAYS:-14} -print -delete
}

cleansys_cargo() {
    test -d ~/.cargo/git/checkouts || return 1

    for f in ~/.cargo/git/checkouts/*; do
        test -d "$f" || continue
        for c in $(command ls -1t "$f" | tail -n+2); do
            cleansys_rmdir "$f/$c"
        done
    done
}

cleansys_docker() {
    [[ $(command -v docker) ]] || return 1

    docker system prune -f
}

cleansys_xcode() {
    test -d ~/Library/Developer/Xcode || return 1

    cleansys_rmdir ~/Library/Developer/Xcode/DerivedData

    if [[ $((10 * 1024 * 1024)) -lt $(stat -f '%z' ~/Library/Caches/com.apple.dt.Xcode/fsCachedData 2>/dev/null) ]]; then
        echo "manually check ~/Library/Caches/com.apple.dt.Xcode/fsCachedData"
    fi
    if [[ $((10 * 1024 * 1024)) -lt $(stat -f '%z' /Library/Developer/CoreSimulator/Profiles/Runtimes 2>/dev/null) ]]; then
        echo "manually check /Library/Developer/CoreSimulator/Profiles/Runtimes"
    fi

    if [[ $(xcrun --find simctl 2>/dev/null) ]]; then
        xcrun simctl erase all && echo "Simulators erased"
    fi
}

cleansys_gradle() {
    cleansys_rmdir ~/.gradle/caches
}

cleansys_rmdir() {
    local size=$(du -shc $@ 2>/dev/null | grep total | cut -f1 | xargs)
    for dir in $*[@]; do
        if [[ $(ls -A "$dir" 2>/dev/null) && $dir == $HOME/* ]]; then
            rm -rf "$dir"
        fi
    done
    local left=$(du -shc $@ 2>/dev/null | grep total | cut -f1 | xargs)
    if [[ $left == 0* ]]; then
        echo "... freed $size"
    else
        echo "... couldn't free $size (left: $left)"
    fi
}
