# Update system.
upgrade() {
    local t=$(date +%s)

    echo " \e[30;1m[\e[35;1m•\e[30;1m]\e[32m brew\e[0m"
    upgrade_brew
    echo " \e[30;1m[\e[35;1m•\e[30;1m]\e[32m apt\e[0m"
    upgrade_apt
    echo " \e[30;1m[\e[35;1m•\e[30;1m]\e[32m mise\e[0m"
    upgrade_mise
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m oh-my-zsh\e[0m"
    upgrade_oh_my_zsh
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m tmux plugins\e[0m"
    upgrade_tmux
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m vim plugins\e[0m"
    upgrade_vim
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m nvim plugins\e[0m"
    upgrade_nvim
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m doom emacs\e[0m"
    upgrade_doom
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m rust\e[0m"
    upgrade_rust
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m flutter\e[0m"
    upgrade_flutter
    echo "\n \e[30;1m[\e[35;1m•\e[30;1m]\e[32m dart\e[0m"
    upgrade_dart

    local took=$(($(date +%s) - $t))
    if [[ $took -gt 59 ]]; then
        local mins=$(($took / 60))
        local secs=$(($took % 60))
        printf "Done, upgraded in %dm%02ds.\n" $mins $secs
    else
        echo "Done, upgraded in ${took}s."
    fi
}

# Update brew and software.
upgrade_brew() {
    [[ $(command -v brew) ]] || return 1

    brew update

    # Possibly filter progs not to update.
    brew outdated --formula | perl -alE 'say $F[0] unless /^(sshfs|gocryptfs)/' | xargs brew upgrade
    brew outdated --cask | perl -alE 'say $F[0] unless /^prog-to-ignore/' | xargs brew upgrade --cask

    brew cleanup -s
}

# Update apt and software.
upgrade_apt() {
    [[ $(command -v apt-get) ]] || return 1

    sudo apt-get update
    sudo apt-get upgrade -y
}

# Update mise and asdf-plugins.
upgrade_mise() {
    [[ $(command -v mise) ]] || return 1

    mise self-update
}

# Update oh my zsh.
upgrade_oh_my_zsh() {
    [[ $(command -v omz) ]] || return 1

    omz update --unattended
}

# Update tmux plugins.
upgrade_tmux() {
    [[ $(command -v tmux) ]] || return 1

    test -x ~/.tmux/plugins/tpm/bin/update_plugins && "$_" all
}

# Update vim plugins.
upgrade_vim() {
    [[ $(command -v vim) ]] || return 1

    vim -c 'PlugUpgrade | PlugUpdate' +qa
}

# Update nvim plugins.
upgrade_nvim() {
    [[ $(command -v nvim) ]] || return 1

    nvim --headless -c 'TSUpdateSync' +qa
    nvim --headless -c 'autocmd User PackerComplete qa' +PackerSync
}

# Update doom emacs.
upgrade_doom() {
    [[ $(command -v doom) ]] || return 1

    doom upgrade
    doom purge
}

# Update rust.
upgrade_rust() {
    [[ $(command -v rustup) ]] || return 1

    rustup update
}

# Update flutter and flutter docs.
upgrade_flutter() {
    [[ $(command -v flutter) ]] || return 1

    # update flutter
    flutter upgrade --force
    flutter config --no-analytics

    # update docset
    local download=false
    local docset=$(http --body --check-status https://master-api.flutter.dev/offline/flutter.xml 2>/dev/null)
    if [[ $? != 0 ]]; then
        echo "Couldn't download flutter.docset!"
        return 1
    fi
    local version=$(echo "$docset" | sed -n 's/\s*<version>\(.*\)<\/version>/\1/p' | xargs)
    url=$(echo "$docset" | sed -n 's/\s*<url>\(.*\)<\/url>/\1/p' | xargs)
    if [[ ! -e ~/flutter/flutter.docset ]]; then
        echo "Downloading flutter.docset..."
        download=true
    fi
    if [[ ! $(cat ~/flutter/flutter.docset-version) == "$version" ]]; then
        echo "Updating flutter.docset to $version..."
        download=true
    fi
    if $download; then
        wget -q -O ~/flutter/dl.tar.gz "$url"
        echo "Unpacking flutter.docset..."
        tar -xzf ~/flutter/dl.tar.gz -C ~/flutter/
        rm -f ~/flutter/dl.tar.gz
        printf %s "$version" >~/flutter/flutter.docset-version
    fi

    # remove icons and localizations to save some space
    rm -rf ~/flutter/flutter.docset/Contents/Resources/Documents/doc/flutter/cupertino/CupertinoIcons
    rm -rf ~/flutter/flutter.docset/Contents/Resources/Documents/doc/flutter/material/Icons
    rm -rf ~/flutter/flutter.docset/Contents/Resources/Documents/doc/flutter/flutter_localizations
}

upgrade_dart() {
    [[ $(command -v dart) ]] || return 1

    dart pub global list | cut -d' ' -f1 | xargs -n 1 dart pub global activate
    dart --disable-analytics
}
